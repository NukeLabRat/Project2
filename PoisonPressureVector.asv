function [ Pressure, Iterations] = PoisonPressureVector(Data)
%PoisonPressure Pressure solving function
%   Itteratively solves for the pressure field durring each timestep. Gives
%   back the pressure field in a matrix at locations given in NodeX and
%   NodeY.

% dx=.05;
% dy=.05;

Iterations = 0;
Error2 = 1;
SOR=1.5; %1.7189 is optimal value.
Beta=dx/dy;
% [ySize, xSize] = size(IsCenterP);
% ConstantMat(isnan(ConstantMat))=0;
Pold=P0;
Pressure=Pold;
while Error2>1E-8
    for i = 1:xSize
        for j = 1:ySize
            if IsCenterP(j,i)==false %checks if node is central node
                if j==1
                    Pressure(j,i)=Pold(j+1,i);
%                     Pold(j,i)=Pold(j+1,i);
                end
                if j==ySize
                    Pressure(j,i)=Pold(j-1,i);
%                     Pold(j,i)=Pold(j-1,i);
                end
                if i==1
                    Pressure(j,i)=Pold(j,i+1);
%                     Pold(j,i)=Pold(j,i+1);
                end
                if i==xSize
                    Pressure(j,i)=Pold(j,i-1);
%                     Pold(j,i)=Pold(j,i-1);
                end
            end   
        end 
    end
             
                    Pressure(Data.BottomWallP)=Pold(Data.BottomWallPmirror);
                    Pressure(Data.LeftWallP)=Pold(Data.LeftWallPmirror)
                    Pressure(Data.RightWallP)=Pold(Data.RightWallPmirror)
                    Pressure(Data.BottomWallP)=Pold(Data.TopWallPmirror)
  
  
                    Data.TopWallP(j,i)=true;
                    Data.TopWallPmirror(j-1,i)=true;

                    Data.LeftWallP(j,i)=true;
                    Data.LeftWallPmirror(j,i+1)=true;

                    Data.RightWallP(j,i)=true;
                    Data.RightWallPmirror(j,i-1)=true;



                 Pressure(Data.Center) = (1-SOR).*Pold(Data.Center)+SOR.*(Pold(Data.Iplus)+Pold(Data.Iminus)+Beta.^2.*(Pold(Data.Jplus)+Pold(Data.Jminus))+dx.^2.*ConstantMat(Data.Center))./(2.*(1+Beta.^2));
                

    Error2 = norm(Pressure-Pold); %Calculate norm 2 error
    if Iterations ==50000
        Stop=1;
    end
    Pold=Pressure;
    Iterations = Iterations+1;
end
Done=1;
end

